(* Problem 5 (exists) *)

(* Write a function that determines whether at least one boolean value
   in its input list is true. *)

let rec exists (bools: bool list) : bool =
  begin match bools with
  | [] -> false
  | x::tl -> x || (exists tl)
  end

(* The `not` function below takes in a boolean value and returns its
   complement *)
let test () : bool =
  not (exists [false; false])
;; run_test "exists all false" test

let test () : bool =
  (exists [true; false; true])
;; run_test "exists multiple true" test

let test () : bool =
   not(exists [false; false; false])
;; run_test "exists all false" test

let test () : bool =
 (exists [true; true; true])
;; run_test "exists all true" test


(*************************************************************************)
(* Problem 6 (join) *)

(* Write a function that takes a list of strings and "flattens" it
   into a single string. Your function should also take an additional
   argument, a separator string, which is interspersed between all of
   the strings in the list.

   Hint: the ^ operator concatenates two strings together. For example,
   `"a" ^ "bc"` evaluates to "abc". *)

let rec join (separator: string) (l: string list) : string =
  begin match l with 
    | [] -> ""
    | [str] -> str
    | n::tail -> n ^ separator ^ join separator tail
    end

;; print_endline (join "," ["a"; "b"; "c"])

let test () : bool =
  (join "," ["a"; "b"; "c"]) = "a,b,c"
;; run_test "test_join nonempty separator" test

let test () : bool =
  (join "" ["a"; "b"; "c"]) =  "abc"
;; run_test "test_join empty separator" test

let test () : bool =
  (join "!" ["a"; "b"; "c" ; "d"]) =  "a!b!c!d"
;; run_test "test_join nonempty separator" test

let test () : bool =
  (join "" ["1"; "2"; "3"]) =  "123"
;; run_test "test_join empty separator" test


(*************************************************************************)
(* Example (printing lists) *)

;; print_endline "~~~~~~~~~~~~~~~~~~~~~~~~"
;; print_endline "Start of list printing example"

(* Once you have implemented the `join` function above, you can use it
   to print out lists of strings. This can be very useful for
   debugging the remaining tasks in this assignment, as you can print
   out the output of your functions to help you understand why your
   test cases are failing *)

(*
;; print_endline (join "," ["a"; "b"; "c"])
*)

(* If you would like to print a list of `int`s, you'll need a variant
   of the `join` function for this purpose. We advise that you go
   ahead and do this so that you can use this function to help debug
   the last few tasks in this homework. *)

let rec int_join (separator: string) (l: int list) : string =
  begin match l with 
    | [] -> ""
    | [str] -> string_of_int(str)
    | n::tail -> string_of_int(n) ^ separator ^ int_join separator tail
    end

;; print_endline ("[" ^ (int_join ";" [1; 2; 3]) ^ "]")


;; print_endline "End of list printing example"
;; print_endline "~~~~~~~~~~~~~~~~~~~~~~~~"

(*************************************************************************)
(* Problem 7 (append) *)

(* Write a function that takes lists l1 and l2 and returns a list
   containing all the items in l1 followed by all the items in l2.

   NOTE: OCaml actually already provides this function. In future
   homeworks you can use built in operator `@`, which appends l1 and l2
   as in l1 @ l2. Do *not* use the @ operator in your solution to this
   problem. *)

let rec append (l1: string list) (l2: string list) : string list =
  begin match l1 with 
    | l1 

let test () : bool =
  (append [] []) = []
;; run_test "append two empty lists" test

let test () : bool =
  (append ["1"; "2"] ["3"]) = ["1"; "2"; "3"]
;; run_test "append different lengths" test

let test () : bool =
  failwith "Add a real test case"
;; run_test "append [ADD A DESCRIPTIVE NAME FOR YOUR TEST HERE]" test

let test () : bool =
  failwith "Add a real test case"
;; run_test "append [ADD A DESCRIPTIVE NAME FOR YOUR TEST HERE]" test


(*************************************************************************)
(* Problem 8 (finding names in a list) *)

(* Write a function that checks whether a list of names contains some
   particular name. *)

let rec contains_str (l: string list) (name: string) : bool =
  failwith "contains_str: unimplemented"

let test () : bool =
  (contains_str ["Garnet"; "Amethyst"; "Pearl"] "Amethyst")
;; run_test "contains_str name in list once" test

let test () : bool =
  not (contains_str ["Garnet"; "Amethyst"; "Pearl"] "Steven")
;; run_test "contains_str name not in list" test

let test () : bool =
  failwith "Add a real test case"
;; run_test "contains [ADD A DESCRIPTIVE NAME FOR YOUR TEST HERE]" test

let test () : bool =
  failwith "Add a real test case"
;; run_test "contains [ADD A DESCRIPTIVE NAME FOR YOUR TEST HERE]" test


(* Next, write a function that, given two lists of names, filters the
   first list so that only those that are also in the second list
   remain. That is, your function should return a list containing all
   the elements that appear in both lists, in the order that they
   appear in the first list. *)

let rec in_both (names1: string list) (names2: string list) : string list =
  failwith "in_both: unimplemented"

let test () : bool =
  (in_both ["Garnet"; "Amethyst"; "Pearl"] ["Pearl"; "Steven"]) = ["Pearl"]
;; run_test "in_both Pearl in both lists" test

let test () : bool =
  (in_both [] ["Pearl"; "Steven"]) = []
;; run_test "in_both empty name list" test

let test () : bool =
  failwith "Add a real test case"
;; run_test "in_both [ADD A DESCRIPTIVE NAME FOR YOUR TEST HERE]" test

let test () : bool =
  failwith "Add a real test case"
;; run_test "in_both [ADD A DESCRIPTIVE NAME FOR YOUR TEST HERE]" test


(*************************************************************************)
(* Problem 9 (merging lists) *)

(* Write a function that merges two input lists into a single list
   that contains all the elements from both input lists in alternating order:
   the first, third, etc. elements come from the first input list and
   the second, fourth, etc. elements come from the second input list.

   The lengths of the two lists may not be the same -- any extra
   elements should appear at the very end of the result. *)

let rec merge (l1: int list) (l2: int list) : int list =
  failwith "merge: unimplemented"

let test () : bool =
  (merge [1; 3; 5; 7] [2; 4; 6; 8]) = [1; 2; 3; 4; 5; 6; 7; 8]
;; run_test "merge lists same size" test

let test () : bool =
  (merge [] [1; 2; 3]) = [1; 2; 3]
;; run_test "merge one empty list" test

let test () : bool =
  failwith "Add a real test case"
;; run_test "merge [ADD A DESCRIPTIVE NAME FOR YOUR TEST HERE]" test

let test () : bool =
  failwith "Add a real test case"
;; run_test "merge [ADD A DESCRIPTIVE NAME FOR YOUR TEST HERE]" test


(*************************************************************************)
(* Problem 10 (is_sorted) *)

